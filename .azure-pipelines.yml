trigger:
  branches:
    include:
      - main

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: terraform-secrets # TF_API_TOKEN securely stored
  - name: TF_CLOUD_ORGANIZATION
    value: "TF_Cloud_Org_101"
  - name: TF_WORKSPACE
    value: "tf-gcp-with-ado"

stages:
  - stage: Validate
    displayName: "Terraform Validation"
    jobs:
      - job: ValidateJob
        steps:
          - script: |
              curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
              echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
              sudo apt update && sudo apt install terraform -y
            displayName: "Install Terraform"

          - script: terraform init
            env:
              TF_TOKEN_app_terraform_io: $(TF_API_TOKEN)
            displayName: "Terraform Init"

          - script: terraform validate
            displayName: "Terraform Validate"

          - script: terraform fmt -check
            displayName: "Terraform Format Check"

  - stage: Plan
    displayName: "Terraform Plan"
    dependsOn: Validate
    jobs:
      - job: PlanJob
        steps:
          - script: |
              curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
              echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
              sudo apt update && sudo apt install terraform -y
            displayName: 'Install Terraform'

          - script: terraform init
            env:
              TF_TOKEN_app_terraform_io: $(TF_API_TOKEN)
            displayName: 'Terraform Init'

          - script: terraform plan -out=tfplan
            env:
              TF_TOKEN_app_terraform_io: $(TF_API_TOKEN)
            displayName: 'Terraform Plan'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Terraform Plan'
            inputs:
              targetPath: 'tfplan'
              artifact: 'tfplan'

  - stage: Apply
    displayName: "Terraform Apply"
    dependsOn: Plan
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: ApplyDeployment
        environment: "prod-approval" # This triggers manual approval
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Terraform Plan'
                  inputs:
                    artifact: 'tfplan' # The name of the artifact to download
                    path: '$(Pipeline.Workspace)' # The path where the artifact will be downloaded

                - script: |
                    curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                    echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                    sudo apt update && sudo apt install terraform -y
                  displayName: 'Install Terraform'

                - script: terraform init
                  env:
                    TF_TOKEN_app_terraform_io: $(TF_API_TOKEN)
                  displayName: 'Terraform Init'

                - script: terraform apply -auto-approve $(Pipeline.Workspace)/tfplan
                  env:
                    TF_TOKEN_app_terraform_io: $(TF_API_TOKEN)
                  displayName: "Terraform Apply"

                - script: echo "Terraform deployment completed successfully."
                  displayName: "Deployment Complete"
